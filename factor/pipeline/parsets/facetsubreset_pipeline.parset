pipeline.steps = [update_mapfile_hosts, create_ms_map, create_msmulti_map, create_parmdb_map, expand_merged_parmdb_map, create_full_skymodels_map, make_facet_skymodels_all, make_sourcedb_all_facet_sources, expand_old_sourcedb_map, expand_new_sourcedb_map, predict_and_difference_models, add_diff_model_to_empty_data]

pipeline.pluginpath = {{ pipeline_dir }}/plugins

# update host entries in all mapfiles
update_mapfile_hosts.control.kind        = plugin
update_mapfile_hosts.control.type        = updateHosts
update_mapfile_hosts.control.mapfile_dir = input.output.mapfile_dir
update_mapfile_hosts.control.hosts       = {{ hosts }}

# create a mapfile with all single MSs from supplied list, length = nfiles
create_ms_map.control.kind        = plugin
create_ms_map.control.type        = addListMapfile
create_ms_map.control.hosts       = {{ hosts }}
create_ms_map.control.files       = {{ ms_files_single }}
create_ms_map.control.mapfile_dir = input.output.mapfile_dir
create_ms_map.control.filename    = input_bands.mapfile

# create a multi-mapfile with the groups of MSs from supplied list, length = nbands
create_msmulti_map.control.kind        = plugin
create_msmulti_map.control.type        = addListMultiMapfile
create_msmulti_map.control.hosts       = {{ hosts }}
create_msmulti_map.control.files       = {{ ms_files_grouped }}
create_msmulti_map.control.mapfile_dir = input.output.mapfile_dir
create_msmulti_map.control.filename    = input_files_grouped.mapfile

# create a mapfile with the direction-independent parmDBs from supplied list, length = nfiles
create_parmdb_map.control.kind        = plugin
create_parmdb_map.control.type        = addListMapfile
create_parmdb_map.control.hosts       = {{ hosts }}
create_parmdb_map.control.files       = {{ dir_indep_parmDBs }}
create_parmdb_map.control.mapfile_dir = input.output.mapfile_dir
create_parmdb_map.control.filename    = dir_indep_instrument_parmdbs.mapfile

# expand mapfile of the dir-dependent parmDB to all files, length = nfiles
expand_merged_parmdb_map.control.kind             = plugin
expand_merged_parmdb_map.control.type             = expandMapfile
expand_merged_parmdb_map.control.mapfile_in       = {{ converted_parmdb_mapfile }}
expand_merged_parmdb_map.control.mapfile_to_match = create_ms_map.output.mapfile
expand_merged_parmdb_map.control.mapfile_dir      = input.output.mapfile_dir
expand_merged_parmdb_map.control.filename         = expand_merged_parmdbs.mapfile

# create a mapfile with the current skymodels from supplied list, length = nbands
create_full_skymodels_map.control.kind        = plugin
create_full_skymodels_map.control.type        = addListMapfile
create_full_skymodels_map.control.hosts       = {{ hosts }}
create_full_skymodels_map.control.files       = {{ skymodels }}
create_full_skymodels_map.control.mapfile_dir = input.output.mapfile_dir
create_full_skymodels_map.control.filename    = full_skymodels.mapfile

# extract the old skymodel for this facet from global skymodel, length = nbands
make_facet_skymodels_all.control.type       = make_facet_skymodel
make_facet_skymodels_all.control.mapfile_in = create_full_skymodels_map.output.mapfile
make_facet_skymodels_all.control.inputkey   = fullmodelfile
make_facet_skymodels_all.control.outputkey  = outfile
make_facet_skymodels_all.argument.flags     = [fullmodelfile,outfile,{{ vertices_file }}]
make_facet_skymodels_all.argument.cal_only  = False

# convert the old facet skymodel into a sourcedb, length = nbands
make_sourcedb_all_facet_sources.control.type       = make_sourcedb
make_sourcedb_all_facet_sources.control.mapfile_in = make_facet_skymodels_all.output.mapfile
make_sourcedb_all_facet_sources.control.inputkey   = in
make_sourcedb_all_facet_sources.argument.format    = <
make_sourcedb_all_facet_sources.argument.outtype   = blob
make_sourcedb_all_facet_sources.argument.append    = False

# expand mapfile of the old sourcedb to all files, length = nfiles
expand_old_sourcedb_map.control.kind           = plugin
expand_old_sourcedb_map.control.type           = mapfileSingleToGroup
expand_old_sourcedb_map.control.mapfile_in     = make_sourcedb_all_facet_sources.output.mapfile
expand_old_sourcedb_map.control.mapfile_groups = create_msmulti_map.output.mapfile
expand_old_sourcedb_map.control.mapfile_dir    = input.output.mapfile_dir
expand_old_sourcedb_map.control.filename       = expand_old_sourcedbs.mapfile

# expand mapfile of the new sourcedb to all files, length = nfiles
expand_new_sourcedb_map.control.kind           = plugin
expand_new_sourcedb_map.control.type           = mapfileSingleToGroup
expand_new_sourcedb_map.control.mapfile_in     = {{ sourcedb_new_facet_sources }}
expand_new_sourcedb_map.control.mapfile_groups = create_msmulti_map.output.mapfile
expand_new_sourcedb_map.control.mapfile_dir    = input.output.mapfile_dir
expand_new_sourcedb_map.control.filename       = expand_new_sourcedbs.mapfile

# predict the old and new models and subtract the old one from the new one, length = nfiles
# compress weights only
predict_and_difference_models.control.type                                 = dppp
predict_and_difference_models.control.mapfiles_in                          = [create_ms_map.output.mapfile,expand_new_sourcedb_map.output.mapfile,expand_merged_parmdb_map.output.mapfile,expand_old_sourcedb_map.output.mapfile,create_parmdb_map.output.mapfile]
predict_and_difference_models.control.inputkeys                            = [msin,dir_dep_sourcedb,dir_dep_parmdb,dir_indep_sourcedb,dir_indep_parmdb]
predict_and_difference_models.argument.numthreads                          = {{ max_cpus_per_io_proc_nfiles }}
predict_and_difference_models.argument.msin.datacolumn                     = DATA
predict_and_difference_models.argument.msout.overwrite                     = True
predict_and_difference_models.argument.msout.writefullresflag              = False
{% if local_dir is not none %}
predict_and_difference_models.argument.local_scratch_dir                   = {{ local_dir }}
{% endif %}
predict_and_difference_models.argument.steps                               = [pred_new,subtract_old]
predict_and_difference_models.argument.pred_new.type                       = predict
predict_and_difference_models.argument.pred_new.sourcedb                   = dir_dep_sourcedb
predict_and_difference_models.argument.pred_new.applycal.parmdb            = dir_dep_parmdb
predict_and_difference_models.argument.pred_new.operation                  = replace
predict_and_difference_models.argument.subtract_old.type                   = predict
predict_and_difference_models.argument.subtract_old.sourcedb               = dir_indep_sourcedb
predict_and_difference_models.argument.subtract_old.applycal.parmdb        = dir_indep_parmdb
predict_and_difference_models.argument.subtract_old.operation              = subtract
{% if use_compression %}
predict_and_difference_models.argument.msout.storagemanager                = "Dysco"
predict_and_difference_models.argument.msout.storagemanager.databitrate    = 0
predict_and_difference_models.argument.msout.storagemanager.weightbitrate  = 12
predict_and_difference_models.argument.msout.storagemanager.distribution   = "TruncatedGaussian"
predict_and_difference_models.argument.msout.storagemanager.disttruncation = 1.5
predict_and_difference_models.argument.msout.storagemanager.normalization  = "AF"
{% endif %}

# add model difference from facet-selfcal to original data, length = nfiles
add_diff_model_to_empty_data.control.type        = add_subtract_columns
add_diff_model_to_empty_data.control.mapfiles_in = [create_ms_map.output.mapfile,predict_and_difference_models.output.mapfile]
add_diff_model_to_empty_data.control.inputkeys   = [file1,file2]
add_diff_model_to_empty_data.argument.flags      = [file1,file2,CORRECTED_DATA,DATA,CORRECTED_DATA,add]
